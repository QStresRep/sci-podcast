name: TTS from TXT posts -> Release MP3

on:
  push:
    paths:
      - "posts/**.txt"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  tts:
    runs-on: ubuntu-latest
    env:
      VOICE: "en-US-JennyNeural"   # 可改
      SPEED: "0%"                  # 可改：-5% / +5%
    steps:
      - uses: actions/checkout@v4

      - name: Ensure posts dir exists
        run: mkdir -p posts

      - name: Collect changed TXT files
        id: changed
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.before || '' }}" ]; then
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^posts/.*\.txt$' || true
          fi > changed.txt
          if [ ! -s changed.txt ]; then
            ls posts/*.txt 2>/dev/null || true > changed.txt
          fi
          echo "Changed files:"
          cat changed.txt || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install azure-cognitiveservices-speech==1.37.0

      - name: Synthesize MP3 with Azure TTS (debug on)
        id: tts
        env:
          SPEECH_KEY: ${{ secrets.SPEECH_KEY }}
          SPEECH_REGION: ${{ secrets.SPEECH_REGION }}
          VOICE: ${{ env.VOICE }}
          SPEED: ${{ env.SPEED }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Using region: ${SPEECH_REGION:-<unset>}"
          echo "Voice: ${VOICE}, Speed: ${SPEED}"

          python - <<'PY'
          import os, re, html, datetime, pathlib, sys
          import azure.cognitiveservices.speech as speechsdk

          def slugify(s: str) -> str:
              s = s.strip().lower().replace(" ", "-")
              return re.sub(r'[^a-z0-9_-]+', '-', s)[:80].strip('-') or "episode"

          def synth(text: str, out_path: str, voice: str, speed: str):
              key = os.getenv("SPEECH_KEY"); region = os.getenv("SPEECH_REGION")
              if not key or not region:
                  raise SystemExit("Missing SPEECH_KEY / SPEECH_REGION secrets.")
              speech_config = speechsdk.SpeechConfig(subscription=key, region=region)
              audio_config = speechsdk.audio.AudioOutputConfig(filename=out_path)
              ssml = f'''<speak version="1.0" xml:lang="en-US">
                <voice name="{voice}">
                  <prosody rate="{speed}">{html.escape(text)}</prosody>
                </voice>
              </speak>'''
              synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
              result = synthesizer.speak_ssml_async(ssml).get()
              if result.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
                  raise SystemExit(f"TTS failed: {result.reason}")

          out_dir = pathlib.Path("tts_out"); out_dir.mkdir(exist_ok=True)
          changed = pathlib.Path("changed.txt")
          files = changed.read_text(encoding="utf-8").splitlines() if changed.exists() else []
          processed = 0

          for fp in files:
              if not fp or not fp.endswith(".txt"): 
                  continue
              try:
                  p = pathlib.Path(fp)
                  if not p.exists():
                      print(f"[SKIP] not found: {fp}")
                      continue
                  raw = p.read_text(encoding="utf-8").splitlines()
                  if len(raw) < 3:
                      print(f"[WARN] body too short (need >=3 lines: title/date/body): {fp}")
                      continue
                  title = (raw[0] or "Episode").strip()
                  date = None
                  if raw[1].lower().startswith("date:"):
                      date = raw[1].split(":",1)[1].strip()
                  if not date:
                      date = datetime.date.today().isoformat()
                  body = "\n".join(raw[2:]).strip()
                  if not body or len(body) < 40:
                      print(f"[WARN] empty/short body: {fp} (len={len(body)})")
                      continue

                  fn = f"{date.replace('-','')}_{slugify(title)}.mp3"
                  out_path = out_dir / fn
                  print(f"[TTS] {fp} -> {out_path}")
                  synth(body, str(out_path), os.getenv("VOICE","en-US-JennyNeural"), os.getenv("SPEED","0%"))
                  print(f"[OK] wrote {out_path} ({out_path.stat().st_size} bytes)")
                  processed += 1
              except Exception as e:
                  print(f"[ERROR] {fp}: {e}")

          # 输出给后续步骤判断
          with open(os.environ["GITHUB_OUTPUT"], "a") as gh:
              gh.write(f"count={processed}\n")

          if processed == 0:
              print("No MP3 generated. Please check: 1) posts/*.txt format; 2) SPEECH_REGION code; 3) Speech quota.")
              sys.exit(1)  # 没产物就报错，方便你在 UI 里看到红色
          PY

      - name: Upload MP3s as workflow artifact (for debugging)
        if: steps.tts.outputs.count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: tts_out
          path: tts_out/*.mp3

      - name: Install GitHub CLI
        if: steps.tts.outputs.count != '0'
        run: |
          gh --version || (type -p apt && sudo apt-get update && sudo apt-get install -y gh)

      - name: Create/Update Release (tag=YYYY-MM-DD) and upload MP3
        if: steps.tts.outputs.count != '0'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TODAY=$(date -u +%F)
          echo "${GH_TOKEN}" | gh auth login --with-token
          gh release view "$TODAY" >/dev/null 2>&1 || gh release create "$TODAY" --title "$TODAY" --notes "Daily TTS upload for $TODAY"
          for f in tts_out/*.mp3; do
            [ -e "$f" ] || continue
            echo "Uploading $f ..."
            gh release upload "$TODAY" "$f" --clobber
          done
