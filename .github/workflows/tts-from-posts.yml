name: TTS + Commit to Repo

on:
  workflow_dispatch:
  push:
    paths:
      - "posts/*.txt"
      - ".github/workflows/tts-to-repo.yml"

permissions:
  contents: write  # 允许推送到仓库

jobs:
  tts:
    runs-on: ubuntu-latest
    env:
      VOICE: en-US-JennyNeural
      SPEED: 0%
      SPEECH_KEY: ${{ secrets.SPEECH_KEY }}
      SPEECH_REGION: ${{ secrets.SPEECH_REGION }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install azure-cognitiveservices-speech

      - name: Build TTS (to tts_out/*.mp3)
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, re, html, datetime, pathlib, sys, glob
          import azure.cognitiveservices.speech as speechsdk

          def slugify(s: str) -> str:
              s = s.strip().lower().replace(" ", "-")
              return re.sub(r'[^a-z0-9_-]+', '-', s)[:80].strip('-') or "episode"

          def synth(text: str, out_path: str, voice: str, speed: str):
              key = os.getenv("SPEECH_KEY"); region = os.getenv("SPEECH_REGION")
              if not key or not region:
                  raise SystemExit("Missing SPEECH_KEY / SPEECH_REGION secrets.")
              speech_config = speechsdk.SpeechConfig(subscription=key, region=region)
              audio_config = speechsdk.audio.AudioOutputConfig(filename=out_path)
              ssml = f'''<speak version="1.0" xml:lang="en-US">
                <voice name="{voice}">
                  <prosody rate="{speed}">{html.escape(text)}</prosody>
                </voice>
              </speak>'''
              synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
              result = synthesizer.speak_ssml_async(ssml).get()
              if result.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
                  raise SystemExit(f"TTS failed: {result.reason}")

          out_dir = pathlib.Path("tts_out"); out_dir.mkdir(exist_ok=True)
          files = sorted(glob.glob("posts/*.txt"))
          if not files:
              print("[ERROR] No posts/*.txt files found")
              sys.exit(1)

          processed = 0
          for fp in files:
              p = pathlib.Path(fp)
              raw = p.read_text(encoding="utf-8").splitlines()
              if len(raw) < 3: continue
              title = (raw[0] or "Episode").strip()
              date = None
              if raw[1].lower().startswith("date:"):
                  date = raw[1].split(":",1)[1].strip()
              if not date:
                  date = datetime.date.today().isoformat()
              body = "\n".join(raw[2:]).strip()
              if not body or len(body) < 40: continue

              fn = f"{date.replace('-','')}_{slugify(title)}.mp3"
              out_path = out_dir / fn
              print(f"[TTS] {fp} -> {out_path}")
              synth(body, str(out_path), os.getenv("VOICE","en-US-JennyNeural"), os.getenv("SPEED","0%"))
              print(f"[OK] wrote {out_path}")
              processed += 1

          if processed == 0:
              print("No MP3 generated.")
              sys.exit(1)
          PY

      - name: Commit mp3 back to repo
        run: |
          mkdir -p docs/audio
          cp -f tts_out/*.mp3 docs/audio/ || true
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docs/audio
          git commit -m "Add generated mp3" || echo "No changes"
          git push
