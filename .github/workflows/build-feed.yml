name: Build RSS feed from Releases

on:
  schedule:
    - cron: '0 0 * * *'     # 每天 00:00 UTC 运行（UTC+8=08:00）
  release:
    types: [published]       # 发布 Release 时自动运行
  workflow_dispatch:         # 需要时可手动触发

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PODCAST_TITLE: "QS-sci-podcast"
      PODCAST_LINK: "https://qstresrep.github.io/sci-podcast/"
      PODCAST_DESCRIPTION: "Bulk Reading!"
    steps:
      - uses: actions/checkout@v4

      # ✅ 安装 Python 和 requests（必需）
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - run: pip install requests

      # 生成 feed.xml
      - name: Generate feed.xml from releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p docs
          python - <<'PY'
          import os, requests, datetime, email.utils, html
          owner_repo = os.getenv("REPO")  # e.g. user/repo
          token = os.getenv("GH_TOKEN")
          title = os.getenv("PODCAST_TITLE")
          link = os.getenv("PODCAST_LINK")
          desc = os.getenv("PODCAST_DESCRIPTION")

          s = requests.Session()
          s.headers.update({
              "Authorization": f"Bearer {token}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28"
          })

          releases, page = [], 1
          while True:
              r = s.get(f"https://api.github.com/repos/{owner_repo}/releases",
                        params={"per_page":100, "page":page})
              r.raise_for_status()
              data = r.json()
              if not data: break
              releases.extend(data); page += 1

          items = []
          for rel in releases:
              pub = rel.get("published_at") or rel.get("created_at")
              if not pub: 
                  continue
              dt = datetime.datetime.fromisoformat(pub.replace("Z","+00:00"))
              pubDate = email.utils.format_datetime(dt)
              rel_name = rel.get("name") or rel.get("tag_name") or "Episode"
              for a in rel.get("assets", []):
                  name = (a.get("name") or "")
                  if not name.lower().endswith(".mp3"): 
                      continue
                  url = a.get("browser_download_url")
                  length = a.get("size") or 0
                  guid = f"{rel.get('tag_name')}-{a.get('id')}"
                  items.append({
                      "title": f"{rel_name} · {name}",
                      "url": url,
                      "length": str(length),
                      "guid": guid,
                      "pubDate": pubDate
                  })

          # 没有条目也写出最小合法 RSS，避免 404
          lines = []
          lines.append('<?xml version="1.0" encoding="UTF-8" ?>')
          lines.append('<rss version="2.0">')
          lines.append('  <channel>')
          lines.append(f'    <title>{html.escape(title)}</title>')
          lines.append(f'    <link>{html.escape(link)}</link>')
          lines.append(f'    <description>{html.escape(desc)}</description>')
          lines.append('    <language>en-us</language>')
          for it in sorted(items, key=lambda x: x["pubDate"], reverse=True):
              lines.append('    <item>')
              lines.append(f'      <title>{html.escape(it["title"])}</title>')
              lines.append(f'      <enclosure url="{html.escape(it["url"])}" length="{it["length"]}" type="audio/mpeg"/>')
              lines.append(f'      <guid>{html.escape(it["guid"])}</guid>')
              lines.append(f'      <pubDate>{it["pubDate"]}</pubDate>')
              lines.append('    </item>')
          lines.append('  </channel>')
          lines.append('</rss>')
          with open("docs/feed.xml","w",encoding="utf-8") as f:
              f.write("\n".join(lines))
          print("feed.xml created / updated.")
          PY

      # ✅ 禁用 Jekyll，确保直接把 docs/ 当静态目录
      - name: Ensure .nojekyll
        run: |
          mkdir -p docs
          touch docs/.nojekyll

      # 提交更新
      - name: Commit & push feed.xml
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update feed.xml"
          file_pattern: |
            docs/feed.xml
            docs/.nojekyll
