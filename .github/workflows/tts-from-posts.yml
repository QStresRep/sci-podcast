name: TTS + Auto Release

on:
  # 手动触发时可自定义 tag / 标题
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v2025.09.26)'
        required: false
      title:
        description: 'Release title'
        required: false
  # 也可在 posts/*.txt 变更时自动触发
  push:
    paths:
      - "posts/*.txt"
      - ".github/workflows/tts-from-posts.yml"

permissions:
  contents: write  # 创建 Release 需要

jobs:
  tts:
    runs-on: ubuntu-latest
    env:
      VOICE: en-US-JennyNeural
      SPEED: 0%
      SPEECH_KEY: ${{ secrets.SPEECH_KEY }}
      SPEECH_REGION: ${{ secrets.SPEECH_REGION }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install azure-cognitiveservices-speech

      - name: Debug posts
        run: |
          echo "List posts/:"
          ls -la posts/ || true

      - name: Build TTS (to tts_out/*.mp3)
        shell: bash
        run: |
          set -euo pipefail
          echo "Using region: ${SPEECH_REGION:-<unset>}"
          echo "Voice: ${VOICE}, Speed: ${SPEED}"

          python - <<'PY'
          import os, re, html, datetime, pathlib, sys, glob
          try:
              import azure.cognitiveservices.speech as speechsdk
          except Exception as e:
              print("[FATAL] Cannot import azure-cognitiveservices-speech:", e)
              sys.exit(2)

          def slugify(s: str) -> str:
              s = s.strip().lower().replace(" ", "-")
              return re.sub(r'[^a-z0-9_-]+', '-', s)[:80].strip('-') or "episode"

          def synth(text: str, out_path: str, voice: str, speed: str):
              key = os.getenv("SPEECH_KEY"); region = os.getenv("SPEECH_REGION")
              if not key or not region:
                  raise SystemExit("Missing SPEECH_KEY / SPEECH_REGION secrets.")
              speech_config = speechsdk.SpeechConfig(subscription=key, region=region)
              audio_config = speechsdk.audio.AudioOutputConfig(filename=out_path)
              ssml = f'''<speak version="1.0" xml:lang="en-US">
                <voice name="{voice}">
                  <prosody rate="{speed}">{html.escape(text)}</prosody>
                </voice>
              </speak>'''
              synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)
              result = synthesizer.speak_ssml_async(ssml).get()
              if result.reason != speechsdk.ResultReason.SynthesizingAudioCompleted:
                  raise SystemExit(f"TTS failed: {result.reason}")

          out_dir = pathlib.Path("tts_out"); out_dir.mkdir(exist_ok=True)

          # 优先 changed.txt；否则扫描 posts/*.txt
          files = []
          changed = pathlib.Path("changed.txt")
          if changed.exists():
              raw = [l.strip() for l in changed.read_text(encoding="utf-8").splitlines() if l.strip()]
              files = [f for f in raw if f.endswith(".txt")]
              print(f"[INFO] changed.txt entries: {len(raw)}, txt after filter: {len(files)}")
          if not files:
              import glob
              files = sorted(glob.glob("posts/*.txt"))
              print(f"[INFO] fallback posts/*.txt -> {len(files)} files")

          if not files:
              print("[ERROR] No candidate .txt files under posts/.")
              with open(os.environ["GITHUB_OUTPUT"], "a") as gh:
                  gh.write("count=0\n")
              sys.exit(1)

          processed = 0
          for fp in files:
              p = pathlib.Path(fp)
              if not p.exists():
                  print(f"[SKIP] not found: {fp}")
                  continue
              raw = p.read_text(encoding="utf-8").splitlines()
              if len(raw) < 3:
                  print(f"[WARN] need >=3 lines (title/date/body): {fp}")
                  continue
              title = (raw[0] or "Episode").strip()
              date = None
              if raw[1].lower().startswith("date:"):
                  date = raw[1].split(":",1)[1].strip()
              if not date:
                  date = datetime.date.today().isoformat()
              body = "\n".join(raw[2:]).strip()
              if not body or len(body) < 40:
                  print(f"[WARN] body too short: {fp} (len={len(body)})")
                  continue

              fn = f"{date.replace('-','')}_{slugify(title)}.mp3"
              out_path = out_dir / fn
              print(f"[TTS] {fp} -> {out_path}")
              try:
                  synth(body, str(out_path), os.getenv("VOICE","en-US-JennyNeural"), os.getenv("SPEED","0%"))
                  print(f"[OK] wrote {out_path} ({out_path.stat().st_size} bytes)")
                  processed += 1
              except Exception as e:
                  print(f"[ERROR] {fp}: {e}")

          with open(os.environ["GITHUB_OUTPUT"], "a") as gh:
              gh.write(f"count={processed}\n")

          if processed == 0:
              print("No MP3 generated. Check posts format / region / quota.")
              sys.exit(1)
          PY

      - name: Upload mp3 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tts_out
          path: tts_out/*.mp3
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: tts
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tts_out
          path: dist

      - name: List files to release
        run: ls -la dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || format('v{0}', github.run_id) }}
          name: ${{ github.event.inputs.title || 'Podcast Audio' }}
          files: |
            dist/*.mp3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
